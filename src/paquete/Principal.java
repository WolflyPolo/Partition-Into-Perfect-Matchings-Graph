/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paquete;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.MouseInfo;
import java.awt.Point;
import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 * Universidad del Norte Dpto de Sistemas Ing. Rafael Capacho Samuel David Polo
 * Peña Febrero 29 de 2016 1972
 * 
 * @author ColombiaWP
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    int id;
    ArrayList<Nodo> marked;
    Graphics g;
    ArrayList<Nodo> nodos;
    ArrayList<Lado> lados;
    int mat[][];

    public Principal() {
        initComponents();
        id = 0; //Para enumerar los nodos.
        g = getGraphics();
        nodos = new ArrayList(); //Aqui se genera A.
        marked = new ArrayList();
        lados = new ArrayList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        textArea1 = new java.awt.TextArea();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButton10 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jButton2.setLabel("Verificar Nodos");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton5.setText("Verificar Lados");
        jButton5.setToolTipText("");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel5.setText("Por favor, presione en cualquier lugar para crear un nodo. Seleccione 2 nodos para crear un lado específico.");

        jButton7.setText("Reiniciar grafo");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        textArea1.setEditable(false);

        jButton8.setText("Partición Perfecta");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Grados de Valencia");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jLabel1.setText("La partición perfecta se creará únicamente si el grafo lo permite.");

        jLabel2.setText("El emparejamiento perfecto se dibuja de color AMARILLO.");

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 205, Short.MAX_VALUE)
        );

        jButton10.setText("Borrar Grafo");
        jButton10.setToolTipText("");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textArea1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(24, 24, 24)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jButton2)
                                                .addGap(18, 18, 18)
                                                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jButton5)))
                                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(textArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton8)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton9)
                            .addComponent(jButton10)))
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton7))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JOptionPane.showMessageDialog(null, "Nodos totales: " + nodos.size(),
                "Aviso", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton2ActionPerformed

    public void DibujarLineas(int nodo1, int nodo2) {
        g.setColor(Color.YELLOW);
        g.drawLine(lados.get(nodo1).getNodo1().getPosx0(), lados.get(nodo1).getNodo1().getPosy0(), lados.get(nodo2).getNodo1().getPosx0(), lados.get(nodo2).getNodo1().getPosy0());
    }

    private int[][] MatrizAdyacencia() {

        int MatrizAd[][] = new int[nodos.size()][nodos.size()];
        for (int i = 0; i < nodos.size(); i++) {
            for (int j = 0; j < nodos.size(); j++) {
                MatrizAd[i][j] = 0;
            }
        }

        for (int i = 0; i < lados.size(); i++) {
            MatrizAd[lados.get(i).getNodo1().getId()][lados.get(i).getNodo2().getId()] = 1;
            MatrizAd[lados.get(i).getNodo2().getId()][lados.get(i).getNodo1().getId()] = 1;
        }
        return MatrizAd;

    }

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked

    }//GEN-LAST:event_formMouseClicked

    private void UnirNodos() {
        if (marked.size() > 1 && marked.get(0) != marked.get(1)) {
            Lado l = new Lado(marked.get(0), marked.get(1));
            int val1 = marked.get(0).getValencia(); //Obtener el grado de valencia actual.
            int val2 = marked.get(1).getValencia(); //Obtener el grado de valencia actual.
            marked.get(0).setValencia(val1 + 1); //Aumentar el grado de valencia.
            marked.get(1).setValencia(val2 + 1); //Aumentar el grado de valencia.
            lados.add(l); //Añadimos el lado.
            g.setColor(Color.RED);
            g.drawOval(marked.get(0).getPosx1(), marked.get(0).getPosy1(), 30, 30);
            g.drawOval(marked.get(1).getPosx1(), marked.get(1).getPosy1(), 30, 30);
            g.setColor(Color.BLACK);
            g.drawLine(marked.get(0).getPosx0(), marked.get(0).getPosy0(), marked.get(1).getPosx0(), marked.get(1).getPosy0());
            System.out.println("Se ha creado un lado uniendo los nodos: " + l.getNodo1().getId() + " con: " + l.getNodo2().getId()); //Verificar la creación de lados.
            marked.get(0).CambiaMarcador();
            marked.get(1).CambiaMarcador();
            marked.clear();
        }
    }

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        JOptionPane.showMessageDialog(null, "Lados totales: " + lados.size(),
                "Aviso", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void ReiniciarGrafo() {
        for (int i = 0; i < lados.size(); i++) {
            g.setColor(Color.BLACK);
            g.drawLine(lados.get(i).getNodo1().getPosx0(), lados.get(i).getNodo1().getPosy0(), lados.get(i).getNodo2().getPosx0(), lados.get(i).getNodo2().getPosy0());
        }
    }

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        ReiniciarGrafo();
    }//GEN-LAST:event_jButton7ActionPerformed

    public int detmejorado(int matriz[][]) {
        int fRet = 0;
        int product = 0;
        if (matriz.length == 2) {
            fRet = matriz[0][0] * matriz[1][1] - matriz[1][0] * matriz[0][1];
        } else {
            for (int i = 0; i < matriz.length; i++) {
                product = 1;
                for (int j = 0; j < matriz.length; j++) {
                    product *= matriz[(i + j) % matriz.length][j];
                }
                fRet += product;
                product = 1;
                for (int j = 0; j < matriz.length; j++) {
                    product *= matriz[(matriz.length - 1) - ((i + j) % matriz.length)][j];
                }
                fRet -= product;
            }
        }
        return fRet;
    }

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        //Primero detectamos que se exista un perfect matching.
        textArea1.append("PARTICIÓN PERFECTA DE EMPAREJAMIENTO");
        textArea1.append(System.getProperty("line.separator")); // Esto para el salto de línea
        ReiniciarGrafo();
        int a[][] = MatrizAdyacencia();
        int b[][] = new int[nodos.size()][nodos.size()];
        //Creación de Matrix de Tutte.
        for (int i = 0; i < nodos.size(); i++) {
            for (int j = 0; j < nodos.size(); j++) {
                if (i < j) {
                    b[i][j] = a[i][j];
                } else {
                    if (i > j) {
                        b[i][j] = -1 * a[j][i];
                    } else {
                        b[i][j] = 0;
                    }
                }
            }
        }
        System.out.println("MATRIZ DE TUTTE:");
        for (int x = 0; x < b.length; x++) {
            System.out.print("|");
            for (int y = 0; y < b[x].length; y++) {
                System.out.print(b[x][y]);
                if (y != b[x].length - 1) {
                    System.out.print("\t");
                }
            }
            System.out.println("|");
        }
        int valor = detmejorado(b); //Si es 0, no existe un perfect matching, caso contrario, sí existe.
        System.out.println("Determinante es: " + valor);
        textArea1.append("Determinante de la matriz de Tutte: " + valor);
        textArea1.append(System.getProperty("line.separator")); // Esto para el salto de línea        
        if (valor == 0) {
            textArea1.append("No existe un emparejamiento perfecto en el grafo.");
            textArea1.append(System.getProperty("line.separator")); // Esto para el salto de línea
        } else {
            ArrayList<Lado> matching = new ArrayList<Lado>();
            textArea1.append("Existe un emparejamiento perfecto en el grafo. Se procede a mostrar uno.");
            textArea1.append(System.getProperty("line.separator")); // Esto para el salto de línea
            //Como existe un perfect matching, se procede a buscar uno.
            int valor1 = 0; //Estos serán los valores de grado de los nodos.
            int valor2 = 0;
            for (int i = 0; i < lados.size(); i++) {
                valor1 = lados.get(i).getNodo1().getValencia();
                valor2 = lados.get(i).getNodo2().getValencia();
                lados.get(i).setVallado(valor1 + valor2);
            }
            Lado buscado = MenorLado(lados);
            matching.add(buscado);
            ArrayList<Lado> copialados = new ArrayList();
            for (int i = 0; i < lados.size(); i++) {
                copialados.add(lados.get(i));
            }
            for (int j = 0; j < lados.size(); j++) {
                if (lados.get(j).getNodo1() == buscado.getNodo1() || lados.get(j).getNodo2() == buscado.getNodo2() || lados.get(j).getNodo1() == buscado.getNodo2() || lados.get(j).getNodo2() == buscado.getNodo1()) {
                    System.out.println("Se ha debido quitar el lado que une a los nodos:  " + lados.get(j).getNodo1().getId() + "," + lados.get(j).getNodo2().getId());
                    copialados.remove(lados.get(j));
                }
            }
            copialados.remove(buscado);
            while (copialados.isEmpty() == false) {
                buscado = MenorLado(copialados);
                matching.add(buscado);
                for (int j = 0; j < lados.size(); j++) {
                    if (lados.get(j).getNodo1() == buscado.getNodo1() || lados.get(j).getNodo2() == buscado.getNodo2() || lados.get(j).getNodo1() == buscado.getNodo2() || lados.get(j).getNodo2() == buscado.getNodo1()) {
                        copialados.remove(lados.get(j));
                        System.out.println("Se ha debido quitar el lado: " + lados.get(j).getPeso());
                    }
                }
                copialados.remove(buscado);
            }
            jPanel1.getGraphics().clearRect(1, 1, jPanel1.getWidth() - 2, jPanel1.getHeight() - 2);
            for (int i = 0; i < nodos.size(); i++) {
                g.setColor(Color.RED);
                nodos.get(i).DibujarVertice(g);
            }
            for (int i = 0; i < matching.size(); i++) {
                g.setColor(Color.YELLOW);
                g.drawLine(matching.get(i).getNodo1().getPosx0(), matching.get(i).getNodo1().getPosy0(), matching.get(i).getNodo2().getPosx0(), matching.get(i).getNodo2().getPosy0());
                textArea1.append("Lado dibujado que une a los nodos: " + matching.get(i).getNodo1().getId() + "," + matching.get(i).getNodo2().getId());
                textArea1.append(System.getProperty("line.separator")); // Esto para el salto de línea
            }
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private Lado MenorLado(ArrayList<Lado> arreglo) {
        int menor = 9999;
        Lado lmenor = null;
        for (int i = 0; i < arreglo.size(); i++) {
            if (arreglo.get(i).getVallado() < menor) {
                menor = arreglo.get(i).getVallado();
                lmenor = arreglo.get(i);
            }
        }
        return lmenor;
    }


    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        //ESCRIBIR LOS GRADOS DE VALENCIA DE CADA VÉRTICE
        textArea1.append("ESCRITURA DE GRADOS DE VALENCIA DE CADA NODO O VÉRTICE");
        textArea1.append(System.getProperty("line.separator")); // Esto para el salto de línea
        for (int i = 0; i < nodos.size(); i++) {
            textArea1.append("Nodo: " + nodos.get(i).getId() + " con grado de valencia: " + nodos.get(i).getValencia());
            textArea1.append(System.getProperty("line.separator")); // Esto para el salto de línea
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        //Obtenemos la posición del click para realizar la creación de nodos.
        Point p = MouseInfo.getPointerInfo().getLocation();
        if (!nodos.isEmpty()) {
            int sw = 0;
            for (int i = 0; i < nodos.size(); i++) {
                if (p.x > nodos.get(i).getPosx1() && p.x < nodos.get(i).getPosx2() //Si la posición del click se encuentra en algún nodo.
                        && p.y > nodos.get(i).getPosy1() && p.y < nodos.get(i).getPosy2()) {
                    nodos.get(i).CambiaMarcador();
                    if (nodos.get(i).isIsMarked() == true) {
                        marked.add(nodos.get(i));
                        g.setColor(Color.yellow);
                        g.drawOval(nodos.get(i).getPosx1(), nodos.get(i).getPosy1(), 30, 30);
                    } else {
                        marked.remove(nodos.get(i));
                        g.setColor(Color.RED);
                        g.drawOval(nodos.get(i).getPosx1(), nodos.get(i).getPosy1(), 30, 30);
                    }
                    sw = 1;
                    System.out.println("Se ha marcado el nodo: " + nodos.get(i).getId() + " a estado: " + nodos.get(i).isIsMarked());
                }
            }
            if (sw != 1) {
                int posx1 = (p.x) - 15; //Posiciones de lado X anterior al centro.
                int posy1 = (p.y) - 15; //Posiciones de lado Y anterior al centro.
                Nodo n = new Nodo(id, p.x, p.y, posx1, posy1, posx1 + 30, posy1 + 30, false); //Se crea un nuevo nodo.
                nodos.add(n);
                n.DibujarVertice(g);
                System.out.println("Nodo: " + n.getId() + " con centro posx: " + n.getPosx0() + " posy: " + n.getPosy0());
                id++;
            }
        } else {
            int posx1 = (p.x) - 15; //Posiciones de lado X anterior al centro.
            int posy1 = (p.y) - 15; //Posiciones de lado Y anterior al centro.
            Nodo n = new Nodo(id, p.x, p.y, posx1, posy1, posx1 + 30, posy1 + 30, false); //Se crea un nuevo nodo.
            nodos.add(n);
            n.DibujarVertice(g);
            System.out.println("Nodo: " + n.getId() + " con centro posx: " + n.getPosx0() + " posy: " + n.getPosy0());
            id++;
        }
        UnirNodos();
    }//GEN-LAST:event_jPanel1MouseClicked

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        jPanel1.getGraphics().clearRect(1, 1, jPanel1.getWidth() - 2, jPanel1.getHeight() - 2);
        id = 0;
        lados.clear();
        nodos.clear();
    }//GEN-LAST:event_jButton10ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private java.awt.TextArea textArea1;
    // End of variables declaration//GEN-END:variables
}
